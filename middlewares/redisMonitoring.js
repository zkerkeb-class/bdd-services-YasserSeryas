import { redisClient } from '../config/redis.js';

// Middleware pour v√©rifier la sant√© de Redis
export const redisHealthCheck = async (req, res, next) => {
  try {
    if (!redisClient.isOpen) {
      console.warn('‚ö†Ô∏è Redis non connect√©, continuons sans cache');
      return next();
    }
    
    // Test simple de ping Redis
    await redisClient.ping();
    next();
  } catch (error) {
    console.error('‚ùå Erreur Redis Health Check:', error.message);
    // Continuons sans Redis si une erreur survient
    next();
  }
};

// Middleware pour r√©cup√©rer des statistiques Redis
export const getRedisStats = async (req, res) => {
  try {
    if (!redisClient.isOpen) {
      return res.status(503).json({
        status: 'Redis non connect√©',
        connected: false
      });
    }

    const info = await redisClient.info();
    const memory = await redisClient.memory('usage');
    const dbSize = await redisClient.dbSize();

    res.json({
      status: 'Redis connect√©',
      connected: true,
      database_size: dbSize,
      memory_usage: memory,
      server_info: {
        version: info.split('\r\n').find(line => line.startsWith('redis_version'))?.split(':')[1],
        uptime: info.split('\r\n').find(line => line.startsWith('uptime_in_seconds'))?.split(':')[1]
      }
    });
  } catch (error) {
    res.status(500).json({
      status: 'Erreur Redis',
      error: error.message,
      connected: false
    });
  }
};

// Utilitaire pour nettoyer les cl√©s expir√©es manuellement
export const cleanupRedisKeys = async () => {
  try {
    if (!redisClient.isOpen) {
      console.warn('‚ö†Ô∏è Redis non connect√©, impossible de nettoyer');
      return;
    }

    // R√©cup√©rer toutes les cl√©s de rate limiting
    const keys = await redisClient.keys('rl:*');
    console.log(`üßπ Nettoyage Redis: ${keys.length} cl√©s trouv√©es`);
    
    // Cette op√©ration est automatique avec TTL, mais peut √™tre utile pour le debug
    if (keys.length > 1000) {
      console.warn(`‚ö†Ô∏è Beaucoup de cl√©s Redis (${keys.length}), v√©rifiez la configuration TTL`);
    }
    
    return keys.length;
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage Redis:', error.message);
  }
};
