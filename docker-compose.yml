services:
  # Service principal de l'API (mode développement)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: billetterie-api
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/billetterie?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-secret-jwt-key}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - billetterie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs

  # Service Redis pour le cache et rate limiting
  redis:
    image: redis:7-alpine
    container_name: redis-billetterie
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - billetterie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - REDIS_REPLICATION_MODE=master
    sysctls:
      - net.core.somaxconn=1024
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Service MongoDB pour la base de données (mode développement)
  mongodb:
    image: mongo:7
    container_name: mongodb-billetterie
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: billetterie
    restart: unless-stopped
    networks:
      - billetterie-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Service de production (optionnel)
  api-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: billetterie-api-prod
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/billetterie?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - billetterie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs
    profiles:
      - production

  # Service de développement supplémentaire (optionnel)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: billetterie-api-dev
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/billetterie_dev?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-secret-key
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - billetterie-network
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    profiles:
      - dev-extra

  # Service Nginx pour load balancing (optionnel)
  nginx:
    image: nginx:alpine
    container_name: nginx-billetterie
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - billetterie-network
    profiles:
      - production

  # Monitoring avec Redis Commander (optionnel)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - billetterie-network
    profiles:
      - monitoring

  # Monitoring avec MongoDB Express (optionnel)
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass
    ports:
      - "8082:8081"
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - billetterie-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  billetterie-network:
    driver: bridge
    name: billetterie-network
