#!/usr/bin/env node

/**
 * üîß Configuration et Pr√©paration des Tests
 * 
 * Ce script pr√©pare l'environnement pour les tests automatis√©s :
 * - V√©rification des pr√©requis
 * - Nettoyage de la base de donn√©es test
 * - Configuration des variables d'environnement
 * - Lancement optionnel de la suite de tests
 */

import { exec } from 'child_process';
import { promisify } from 'util';
import { readFileSync, writeFileSync, existsSync } from 'fs';

const execAsync = promisify(exec);
const SERVER_URL = 'http://localhost:3000';

const COLORS = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(level, message) {
  const colors = {
    INFO: COLORS.blue,
    SUCCESS: COLORS.green,
    ERROR: COLORS.red,
    WARNING: COLORS.yellow,
    STEP: COLORS.magenta
  };
  
  console.log(`${colors[level]}${level}: ${message}${COLORS.reset}`);
}

async function checkNodeVersion() {
  log('STEP', 'üîç V√©rification de la version Node.js');
  
  try {
    const { stdout } = await execAsync('node --version');
    const version = stdout.trim();
    const majorVersion = parseInt(version.substring(1).split('.')[0]);
    
    if (majorVersion >= 18) {
      log('SUCCESS', `Node.js ${version} - Compatible ‚úÖ`);
      return true;
    } else {
      log('ERROR', `Node.js ${version} - Version 18+ requise ‚ùå`);
      return false;
    }
  } catch (error) {
    log('ERROR', 'Node.js non trouv√©');
    return false;
  }
}

async function checkServerStatus() {
  log('STEP', 'üè• V√©rification du statut du serveur');
  
  try {
    const response = await fetch(`${SERVER_URL}/health`);
    if (response.ok) {
      log('SUCCESS', 'Serveur accessible ‚úÖ');
      return true;
    } else {
      log('ERROR', `Serveur inaccessible (${response.status}) ‚ùå`);
      return false;
    }
  } catch (error) {
    log('ERROR', 'Serveur non accessible ‚ùå');
    return false;
  }
}

async function checkDependencies() {
  log('STEP', 'üì¶ V√©rification des d√©pendances');
  
  try {
    // V√©rifier package.json
    if (!existsSync('package.json')) {
      log('ERROR', 'package.json non trouv√©');
      return false;
    }
    
    const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
    const requiredDeps = [
      'express',
      'mongoose',
      'redis',
      'swagger-jsdoc',
      'swagger-ui-express'
    ];
    
    const missing = requiredDeps.filter(dep => 
      !packageJson.dependencies?.[dep] && !packageJson.devDependencies?.[dep]
    );
    
    if (missing.length > 0) {
      log('ERROR', `D√©pendances manquantes: ${missing.join(', ')}`);
      return false;
    }
    
    log('SUCCESS', 'Toutes les d√©pendances sont pr√©sentes ‚úÖ');
    return true;
  } catch (error) {
    log('ERROR', 'Erreur lors de la v√©rification des d√©pendances');
    return false;
  }
}

async function checkDatabaseConnections() {
  log('STEP', 'üóÑÔ∏è V√©rification des connexions base de donn√©es');
  
  let mongoOk = false;
  let redisOk = false;
  
  // Test MongoDB
  try {
    await execAsync('mongosh --eval "db.runCommand({ping: 1})" --quiet');
    log('SUCCESS', 'MongoDB accessible ‚úÖ');
    mongoOk = true;
  } catch (error) {
    log('WARNING', 'MongoDB non accessible ou non install√© ‚ö†Ô∏è');
  }
  
  // Test Redis
  try {
    await execAsync('redis-cli ping');
    log('SUCCESS', 'Redis accessible ‚úÖ');
    redisOk = true;
  } catch (error) {
    log('WARNING', 'Redis non accessible ou non install√© ‚ö†Ô∏è');
  }
  
  return { mongo: mongoOk, redis: redisOk };
}

async function createTestEnvFile() {
  log('STEP', '‚öôÔ∏è Configuration de l\'environnement de test');
  
  const testEnvContent = `# Configuration de test - G√©n√©r√©e automatiquement
NODE_ENV=test
PORT=3000

# Base de donn√©es test
MONGO_URI=mongodb://localhost:27017/billetterie_test_db
REDIS_URL=redis://localhost:6379

# JWT pour tests
JWT_SECRET=test_jwt_secret_key_for_automated_testing_only
JWT_EXPIRE=1h

# Email d√©sactiv√© pour tests
EMAIL_SERVICE=disabled
EMAIL_USER=test@example.com
EMAIL_PASS=test_password

# Logs de test
LOG_LEVEL=error
`;

  try {
    writeFileSync('.env.test', testEnvContent);
    log('SUCCESS', 'Fichier .env.test cr√©√© ‚úÖ');
    return true;
  } catch (error) {
    log('ERROR', 'Impossible de cr√©er .env.test');
    return false;
  }
}

async function cleanTestDatabase() {
  log('STEP', 'üßπ Nettoyage de la base de donn√©es de test');
  
  try {
    // Supprimer la base de test si elle existe
    await execAsync('mongosh billetterie_test_db --eval "db.dropDatabase()" --quiet');
    log('SUCCESS', 'Base de donn√©es de test nettoy√©e ‚úÖ');
    return true;
  } catch (error) {
    log('WARNING', 'Impossible de nettoyer la base de test (peut √™tre normal)');
    return true; // Non critique
  }
}

async function installMissingPackages() {
  log('STEP', 'üì• Installation des packages manquants');
  
  try {
    // V√©rifier si node_modules existe
    if (!existsSync('node_modules')) {
      log('INFO', 'Installation des d√©pendances...');
      await execAsync('npm install');
      log('SUCCESS', 'D√©pendances install√©es ‚úÖ');
    } else {
      log('SUCCESS', 'D√©pendances d√©j√† install√©es ‚úÖ');
    }
    return true;
  } catch (error) {
    log('ERROR', 'Erreur lors de l\'installation des d√©pendances');
    return false;
  }
}

async function startServerIfNeeded() {
  log('STEP', 'üöÄ V√©rification/D√©marrage du serveur');
  
  const isRunning = await checkServerStatus();
  
  if (isRunning) {
    log('SUCCESS', 'Serveur d√©j√† en cours d\'ex√©cution ‚úÖ');
    return true;
  }
  
  log('INFO', 'D√©marrage du serveur en arri√®re-plan...');
  
  try {
    // D√©marrer le serveur en arri√®re-plan
    const serverProcess = exec('npm run dev', { env: { ...process.env, NODE_ENV: 'test' } });
    
    // Attendre que le serveur soit pr√™t
    for (let i = 0; i < 30; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const isReady = await checkServerStatus();
      if (isReady) {
        log('SUCCESS', 'Serveur d√©marr√© avec succ√®s ‚úÖ');
        return { success: true, process: serverProcess };
      }
    }
    
    log('ERROR', 'Timeout lors du d√©marrage du serveur');
    return { success: false, process: null };
  } catch (error) {
    log('ERROR', 'Erreur lors du d√©marrage du serveur');
    return { success: false, process: null };
  }
}

async function runTestSuite() {
  log('STEP', 'üß™ Lancement de la suite de tests');
  
  try {
    await execAsync('node test-user-journeys.js');
    log('SUCCESS', 'Suite de tests termin√©e avec succ√®s ‚úÖ');
    return true;
  } catch (error) {
    log('ERROR', '√âchec de la suite de tests ‚ùå');
    return false;
  }
}

async function main() {
  console.log(`${COLORS.bright}${COLORS.cyan}`);
  console.log('üîß CONFIGURATION ET PR√âPARATION DES TESTS');
  console.log('==========================================');
  console.log(`${COLORS.reset}\n`);
  
  const checks = [
    { name: 'Version Node.js', fn: checkNodeVersion, critical: true },
    { name: 'Installation d√©pendances', fn: installMissingPackages, critical: true },
    { name: 'V√©rification d√©pendances', fn: checkDependencies, critical: true },
    { name: 'Connexions base de donn√©es', fn: checkDatabaseConnections, critical: false },
    { name: 'Fichier environnement test', fn: createTestEnvFile, critical: true },
    { name: 'Nettoyage base test', fn: cleanTestDatabase, critical: false }
  ];
  
  let allPassed = true;
  
  for (const check of checks) {
    try {
      const result = await check.fn();
      if (!result && check.critical) {
        allPassed = false;
        log('ERROR', `‚ùå √âchec critique: ${check.name}`);
        break;
      }
    } catch (error) {
      if (check.critical) {
        allPassed = false;
        log('ERROR', `‚ùå Erreur critique: ${check.name}`);
        break;
      } else {
        log('WARNING', `‚ö†Ô∏è √âchec non critique: ${check.name}`);
      }
    }
  }
  
  if (!allPassed) {
    console.log(`\n${COLORS.red}‚ùå Pr√©paration √©chou√©e. V√©rifiez les erreurs ci-dessus.${COLORS.reset}`);
    process.exit(1);
  }
  
  // D√©marrage du serveur si n√©cessaire
  const serverStatus = await startServerIfNeeded();
  
  if (!serverStatus.success) {
    console.log(`\n${COLORS.red}‚ùå Impossible de d√©marrer le serveur.${COLORS.reset}`);
    process.exit(1);
  }
  
  console.log(`\n${COLORS.green}‚úÖ PR√âPARATION TERMIN√âE AVEC SUCC√àS${COLORS.reset}`);
  console.log(`${COLORS.cyan}üöÄ Pr√™t pour les tests automatis√©s !${COLORS.reset}\n`);
  
  // Demander si on lance les tests
  const args = process.argv.slice(2);
  if (args.includes('--run-tests')) {
    console.log(`${COLORS.yellow}üß™ Lancement automatique des tests...${COLORS.reset}\n`);
    await runTestSuite();
  } else {
    console.log(`${COLORS.blue}üí° Pour lancer les tests maintenant:${COLORS.reset}`);
    console.log(`${COLORS.cyan}   node test-user-journeys.js${COLORS.reset}\n`);
    console.log(`${COLORS.blue}üí° Ou relancer avec les tests automatiques:${COLORS.reset}`);
    console.log(`${COLORS.cyan}   node test-setup.js --run-tests${COLORS.reset}\n`);
  }
}

// V√©rification de fetch
if (typeof fetch === 'undefined') {
  console.log(`${COLORS.red}‚ùå fetch non disponible. Node.js 18+ requis.${COLORS.reset}`);
  process.exit(1);
}

main().catch(error => {
  console.error(`${COLORS.red}‚ùå Erreur fatale: ${error.message}${COLORS.reset}`);
  process.exit(1);
});
